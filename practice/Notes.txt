Binary Search

for rotations -> add n and take modulo to avoid -ve
			take modulo to avoid out of bound

for min -> a[i]<a[i-1] && a[i]<a[i+1]

for infinite sorted arrays  -> first take start=0 and end=1;
					then start=end and end=end*2
					until key is bounded by start and end
					
					then binary search

/////////////////////////

Stacks

#include<stacks>

if O(n^2) and for(i:some range){for(j:f(i){...}}
	then use stacks


////////////////////

Heap

k'th smallest/largest element(s) in array
	then use max/min heap resp.
k-sorted (nearly sorted) to sorted -> use heap

priority_queue <int> maxh;
priority_queue <int, vector<int>, greater<int> > minh;
